# coding: utf-8

"""
    Lidarr

    Lidarr API docs  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from lidarr.models.quality import Quality
from lidarr.models.revision import Revision

class QualityModel(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    quality: Optional[Quality]
    revision: Optional[Revision]
    __properties = ["quality", "revision"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True
        alias_generator = lambda x: x.split("_")[0] + "".join(word.capitalize() for word in x.split("_")[1:])

    def __getitem__(self, item):
        return getattr(self, item)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> QualityModel:
        """Create an instance of QualityModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of quality
        if self.quality:
            _dict['quality'] = self.quality.to_dict()
        # override the default output from pydantic by calling `to_dict()` of revision
        if self.revision:
            _dict['revision'] = self.revision.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> QualityModel:
        """Create an instance of QualityModel from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return QualityModel.parse_obj(obj)

        _obj = QualityModel.parse_obj({
            "quality": Quality.from_dict(obj.get("quality")) if obj.get("quality") is not None else None,
            "revision": Revision.from_dict(obj.get("revision")) if obj.get("revision") is not None else None
        })
        return _obj

